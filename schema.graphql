input CreateShoppingListItemInput {
  title: String!
}

type CreateShoppingListItemPayload {
  shoppingListItem: ShoppingListItem!
}

input DeleteShoppingListItemInput {
  shoppingListItem: ID!
}

type DeleteShoppingListItemPayload {
  shoppingListItem: ShoppingListItem!
}

type Mutation {
  createShoppingListItem(input: CreateShoppingListItemInput!): CreateShoppingListItemPayload!
  deleteShoppingListItem(input: DeleteShoppingListItemInput!): DeleteShoppingListItemPayload!
  updateShoppingListItem(input: UpdateShoppingListItemInput!): UpdateShoppingListItemPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  shoppingList(after: String, before: String, first: Int, last: Int): QueryShoppingListConnection!
}

type QueryShoppingListConnection {
  edges: [QueryShoppingListConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryShoppingListConnectionEdge {
  cursor: String!
  node: ShoppingListItem!
}

type ShoppingListItem implements Node {
  completed: Boolean!
  id: ID!
  title: String!
}

input UpdateShoppingListItemInput {
  completed: Boolean
  shoppingListItem: ID!
  title: String
}

type UpdateShoppingListItemPayload {
  shoppingListItem: ShoppingListItem!
}