input CreateShoppingListInput {
  title: String!
}

input CreateShoppingListItemInput {
  shoppingList: ID!
  title: String!
}

type CreateShoppingListItemPayload {
  shoppingListItem: ShoppingListItem!
}

type CreateShoppingListPayload {
  shoppingList: ShoppingList!
}

input DeleteShoppingListInput {
  shoppingList: ID!
}

input DeleteShoppingListItemInput {
  shoppingListItem: ID!
}

type DeleteShoppingListItemPayload {
  shoppingListItem: ShoppingListItem!
}

type DeleteShoppingListPayload {
  shoppingList: ShoppingList!
}

type Mutation {
  createShoppingList(input: CreateShoppingListInput!): CreateShoppingListPayload!
  createShoppingListItem(input: CreateShoppingListItemInput!): CreateShoppingListItemPayload!
  deleteShoppingList(input: DeleteShoppingListInput!): DeleteShoppingListPayload!
  deleteShoppingListItem(input: DeleteShoppingListItemInput!): DeleteShoppingListItemPayload!
  updateShoppingList(input: UpdateShoppingListInput!): UpdateShoppingListPayload!
  updateShoppingListItem(input: UpdateShoppingListItemInput!): UpdateShoppingListItemPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  shoppingLists(after: String, before: String, first: Int, last: Int): QueryShoppingListsConnection!
}

type QueryShoppingListsConnection {
  edges: [QueryShoppingListsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryShoppingListsConnectionEdge {
  cursor: String!
  node: ShoppingList!
}

type ShoppingList implements Node {
  id: ID!
  items(after: String, before: String, completed: Boolean, first: Int, last: Int): ShoppingListItemsConnection!
  title: String!
}

type ShoppingListItem implements Node {
  completed: Boolean!
  id: ID!
  shoppingList: ShoppingList!
  title: String!
}

type ShoppingListItemsConnection {
  edges: [ShoppingListItemsConnectionEdge]!
  pageInfo: PageInfo!
}

type ShoppingListItemsConnectionEdge {
  cursor: String!
  node: ShoppingListItem!
}

input UpdateShoppingListInput {
  shoppingList: ID!
  title: String
}

input UpdateShoppingListItemInput {
  completed: Boolean
  shoppingListItem: ID!
  title: String
}

type UpdateShoppingListItemPayload {
  shoppingListItem: ShoppingListItem!
}

type UpdateShoppingListPayload {
  shoppingListItem: ShoppingList!
}